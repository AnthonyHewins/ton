// Code generated by "enumer -type TraceExporter -text -transform lower -trimprefix TraceExporter"; DO NOT EDIT.

package conf

import (
	"fmt"
	"strings"
)

const _TraceExporterName = "stdoutotlp"

var _TraceExporterIndex = [...]uint8{0, 6, 10}

const _TraceExporterLowerName = "stdoutotlp"

func (i TraceExporter) String() string {
	if i >= TraceExporter(len(_TraceExporterIndex)-1) {
		return fmt.Sprintf("TraceExporter(%d)", i)
	}
	return _TraceExporterName[_TraceExporterIndex[i]:_TraceExporterIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _TraceExporterNoOp() {
	var x [1]struct{}
	_ = x[TraceExporterStdout-(0)]
	_ = x[TraceExporterOTLP-(1)]
}

var _TraceExporterValues = []TraceExporter{TraceExporterStdout, TraceExporterOTLP}

var _TraceExporterNameToValueMap = map[string]TraceExporter{
	_TraceExporterName[0:6]:       TraceExporterStdout,
	_TraceExporterLowerName[0:6]:  TraceExporterStdout,
	_TraceExporterName[6:10]:      TraceExporterOTLP,
	_TraceExporterLowerName[6:10]: TraceExporterOTLP,
}

var _TraceExporterNames = []string{
	_TraceExporterName[0:6],
	_TraceExporterName[6:10],
}

// TraceExporterString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TraceExporterString(s string) (TraceExporter, error) {
	if val, ok := _TraceExporterNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _TraceExporterNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to TraceExporter values", s)
}

// TraceExporterValues returns all values of the enum
func TraceExporterValues() []TraceExporter {
	return _TraceExporterValues
}

// TraceExporterStrings returns a slice of all String values of the enum
func TraceExporterStrings() []string {
	strs := make([]string, len(_TraceExporterNames))
	copy(strs, _TraceExporterNames)
	return strs
}

// IsATraceExporter returns "true" if the value is listed in the enum definition. "false" otherwise
func (i TraceExporter) IsATraceExporter() bool {
	for _, v := range _TraceExporterValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for TraceExporter
func (i TraceExporter) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for TraceExporter
func (i *TraceExporter) UnmarshalText(text []byte) error {
	var err error
	*i, err = TraceExporterString(string(text))
	return err
}
