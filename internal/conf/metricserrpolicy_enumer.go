// Code generated by "enumer -type MetricsErrPolicy -text -trimprefix MetricsErrPolicy -transform lower"; DO NOT EDIT.

package conf

import (
	"fmt"
	"strings"
)

const _MetricsErrPolicyName = "returncontinuepanic"

var _MetricsErrPolicyIndex = [...]uint8{0, 6, 14, 19}

const _MetricsErrPolicyLowerName = "returncontinuepanic"

func (i MetricsErrPolicy) String() string {
	if i >= MetricsErrPolicy(len(_MetricsErrPolicyIndex)-1) {
		return fmt.Sprintf("MetricsErrPolicy(%d)", i)
	}
	return _MetricsErrPolicyName[_MetricsErrPolicyIndex[i]:_MetricsErrPolicyIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _MetricsErrPolicyNoOp() {
	var x [1]struct{}
	_ = x[MetricsErrPolicyReturn-(0)]
	_ = x[MetricsErrPolicyContinue-(1)]
	_ = x[MetricsErrPolicyPanic-(2)]
}

var _MetricsErrPolicyValues = []MetricsErrPolicy{MetricsErrPolicyReturn, MetricsErrPolicyContinue, MetricsErrPolicyPanic}

var _MetricsErrPolicyNameToValueMap = map[string]MetricsErrPolicy{
	_MetricsErrPolicyName[0:6]:        MetricsErrPolicyReturn,
	_MetricsErrPolicyLowerName[0:6]:   MetricsErrPolicyReturn,
	_MetricsErrPolicyName[6:14]:       MetricsErrPolicyContinue,
	_MetricsErrPolicyLowerName[6:14]:  MetricsErrPolicyContinue,
	_MetricsErrPolicyName[14:19]:      MetricsErrPolicyPanic,
	_MetricsErrPolicyLowerName[14:19]: MetricsErrPolicyPanic,
}

var _MetricsErrPolicyNames = []string{
	_MetricsErrPolicyName[0:6],
	_MetricsErrPolicyName[6:14],
	_MetricsErrPolicyName[14:19],
}

// MetricsErrPolicyString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func MetricsErrPolicyString(s string) (MetricsErrPolicy, error) {
	if val, ok := _MetricsErrPolicyNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _MetricsErrPolicyNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to MetricsErrPolicy values", s)
}

// MetricsErrPolicyValues returns all values of the enum
func MetricsErrPolicyValues() []MetricsErrPolicy {
	return _MetricsErrPolicyValues
}

// MetricsErrPolicyStrings returns a slice of all String values of the enum
func MetricsErrPolicyStrings() []string {
	strs := make([]string, len(_MetricsErrPolicyNames))
	copy(strs, _MetricsErrPolicyNames)
	return strs
}

// IsAMetricsErrPolicy returns "true" if the value is listed in the enum definition. "false" otherwise
func (i MetricsErrPolicy) IsAMetricsErrPolicy() bool {
	for _, v := range _MetricsErrPolicyValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for MetricsErrPolicy
func (i MetricsErrPolicy) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for MetricsErrPolicy
func (i *MetricsErrPolicy) UnmarshalText(text []byte) error {
	var err error
	*i, err = MetricsErrPolicyString(string(text))
	return err
}
