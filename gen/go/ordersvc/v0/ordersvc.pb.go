// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: ordersvc/v0/ordersvc.proto

package ordersvc

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Action int32

const (
	Action_ACTION_UNSPECIFIED Action = 0
	Action_ACTION_BUY         Action = 1
	Action_ACTION_SELL        Action = 2
)

// Enum value maps for Action.
var (
	Action_name = map[int32]string{
		0: "ACTION_UNSPECIFIED",
		1: "ACTION_BUY",
		2: "ACTION_SELL",
	}
	Action_value = map[string]int32{
		"ACTION_UNSPECIFIED": 0,
		"ACTION_BUY":         1,
		"ACTION_SELL":        2,
	}
)

func (x Action) Enum() *Action {
	p := new(Action)
	*p = x
	return p
}

func (x Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Action) Descriptor() protoreflect.EnumDescriptor {
	return file_ordersvc_v0_ordersvc_proto_enumTypes[0].Descriptor()
}

func (Action) Type() protoreflect.EnumType {
	return &file_ordersvc_v0_ordersvc_proto_enumTypes[0]
}

func (x Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Action.Descriptor instead.
func (Action) EnumDescriptor() ([]byte, []int) {
	return file_ordersvc_v0_ordersvc_proto_rawDescGZIP(), []int{0}
}

type OrderStatus int32

const (
	OrderStatus_ORDER_STATUS_UNSPECIFIED     OrderStatus = 0 // same as "unknown"
	OrderStatus_ORDER_STATUS_CANCELED        OrderStatus = 1
	OrderStatus_ORDER_STATUS_COMPLETED       OrderStatus = 2
	OrderStatus_ORDER_STATUS_EXPIRED         OrderStatus = 3
	OrderStatus_ORDER_STATUS_FILLED          OrderStatus = 4
	OrderStatus_ORDER_STATUS_PENDING_CANCEL  OrderStatus = 5
	OrderStatus_ORDER_STATUS_PENDING_NEW     OrderStatus = 6
	OrderStatus_ORDER_STATUS_PENDING_REPLACE OrderStatus = 7
	OrderStatus_ORDER_STATUS_REJECTED        OrderStatus = 8
	OrderStatus_ORDER_STATUS_SUSPENDED       OrderStatus = 9
	OrderStatus_ORDER_STATUS_WORKING         OrderStatus = 10
)

// Enum value maps for OrderStatus.
var (
	OrderStatus_name = map[int32]string{
		0:  "ORDER_STATUS_UNSPECIFIED",
		1:  "ORDER_STATUS_CANCELED",
		2:  "ORDER_STATUS_COMPLETED",
		3:  "ORDER_STATUS_EXPIRED",
		4:  "ORDER_STATUS_FILLED",
		5:  "ORDER_STATUS_PENDING_CANCEL",
		6:  "ORDER_STATUS_PENDING_NEW",
		7:  "ORDER_STATUS_PENDING_REPLACE",
		8:  "ORDER_STATUS_REJECTED",
		9:  "ORDER_STATUS_SUSPENDED",
		10: "ORDER_STATUS_WORKING",
	}
	OrderStatus_value = map[string]int32{
		"ORDER_STATUS_UNSPECIFIED":     0,
		"ORDER_STATUS_CANCELED":        1,
		"ORDER_STATUS_COMPLETED":       2,
		"ORDER_STATUS_EXPIRED":         3,
		"ORDER_STATUS_FILLED":          4,
		"ORDER_STATUS_PENDING_CANCEL":  5,
		"ORDER_STATUS_PENDING_NEW":     6,
		"ORDER_STATUS_PENDING_REPLACE": 7,
		"ORDER_STATUS_REJECTED":        8,
		"ORDER_STATUS_SUSPENDED":       9,
		"ORDER_STATUS_WORKING":         10,
	}
)

func (x OrderStatus) Enum() *OrderStatus {
	p := new(OrderStatus)
	*p = x
	return p
}

func (x OrderStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_ordersvc_v0_ordersvc_proto_enumTypes[1].Descriptor()
}

func (OrderStatus) Type() protoreflect.EnumType {
	return &file_ordersvc_v0_ordersvc_proto_enumTypes[1]
}

func (x OrderStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderStatus.Descriptor instead.
func (OrderStatus) EnumDescriptor() ([]byte, []int) {
	return file_ordersvc_v0_ordersvc_proto_rawDescGZIP(), []int{1}
}

type OrderType int32

const (
	OrderType_ORDER_TYPE_UNSPECIFIED       OrderType = 0
	OrderType_ORDER_TYPE_LIMIT             OrderType = 1
	OrderType_ORDER_TYPE_MIT               OrderType = 2
	OrderType_ORDER_TYPE_MARKET            OrderType = 3
	OrderType_ORDER_TYPE_QTS               OrderType = 4
	OrderType_ORDER_TYPE_STOP              OrderType = 5
	OrderType_ORDER_TYPE_STOPLIMIT         OrderType = 6
	OrderType_ORDER_TYPE_TRAILINGSTOP      OrderType = 7
	OrderType_ORDER_TYPE_TRAILINGSTOPLIMIT OrderType = 8
)

// Enum value maps for OrderType.
var (
	OrderType_name = map[int32]string{
		0: "ORDER_TYPE_UNSPECIFIED",
		1: "ORDER_TYPE_LIMIT",
		2: "ORDER_TYPE_MIT",
		3: "ORDER_TYPE_MARKET",
		4: "ORDER_TYPE_QTS",
		5: "ORDER_TYPE_STOP",
		6: "ORDER_TYPE_STOPLIMIT",
		7: "ORDER_TYPE_TRAILINGSTOP",
		8: "ORDER_TYPE_TRAILINGSTOPLIMIT",
	}
	OrderType_value = map[string]int32{
		"ORDER_TYPE_UNSPECIFIED":       0,
		"ORDER_TYPE_LIMIT":             1,
		"ORDER_TYPE_MIT":               2,
		"ORDER_TYPE_MARKET":            3,
		"ORDER_TYPE_QTS":               4,
		"ORDER_TYPE_STOP":              5,
		"ORDER_TYPE_STOPLIMIT":         6,
		"ORDER_TYPE_TRAILINGSTOP":      7,
		"ORDER_TYPE_TRAILINGSTOPLIMIT": 8,
	}
)

func (x OrderType) Enum() *OrderType {
	p := new(OrderType)
	*p = x
	return p
}

func (x OrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_ordersvc_v0_ordersvc_proto_enumTypes[2].Descriptor()
}

func (OrderType) Type() protoreflect.EnumType {
	return &file_ordersvc_v0_ordersvc_proto_enumTypes[2]
}

func (x OrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderType.Descriptor instead.
func (OrderType) EnumDescriptor() ([]byte, []int) {
	return file_ordersvc_v0_ordersvc_proto_rawDescGZIP(), []int{2}
}

type TIF int32

const (
	TIF_TIF_UNSPECIFIED TIF = 0
	TIF_TIF_DAY         TIF = 1
	TIF_TIF_FOK         TIF = 2
	TIF_TIF_GTC         TIF = 3
	TIF_TIF_GTD         TIF = 4
	TIF_TIF_IOC         TIF = 5
)

// Enum value maps for TIF.
var (
	TIF_name = map[int32]string{
		0: "TIF_UNSPECIFIED",
		1: "TIF_DAY",
		2: "TIF_FOK",
		3: "TIF_GTC",
		4: "TIF_GTD",
		5: "TIF_IOC",
	}
	TIF_value = map[string]int32{
		"TIF_UNSPECIFIED": 0,
		"TIF_DAY":         1,
		"TIF_FOK":         2,
		"TIF_GTC":         3,
		"TIF_GTD":         4,
		"TIF_IOC":         5,
	}
)

func (x TIF) Enum() *TIF {
	p := new(TIF)
	*p = x
	return p
}

func (x TIF) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TIF) Descriptor() protoreflect.EnumDescriptor {
	return file_ordersvc_v0_ordersvc_proto_enumTypes[3].Descriptor()
}

func (TIF) Type() protoreflect.EnumType {
	return &file_ordersvc_v0_ordersvc_proto_enumTypes[3]
}

func (x TIF) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TIF.Descriptor instead.
func (TIF) EnumDescriptor() ([]byte, []int) {
	return file_ordersvc_v0_ordersvc_proto_rawDescGZIP(), []int{3}
}

// Order contains the protobuf definition for all orders that are saved in the order
// cache
type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AccountId           uint64                 `protobuf:"varint,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	ContractId          uint64                 `protobuf:"varint,3,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	SpreadDefinitionId  uint64                 `protobuf:"varint,4,opt,name=spread_definition_id,json=spreadDefinitionId,proto3" json:"spread_definition_id,omitempty"`
	Timestamp           *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Action              Action                 `protobuf:"varint,6,opt,name=action,proto3,enum=ordersvc.v0.Action" json:"action,omitempty"`
	Status              OrderStatus            `protobuf:"varint,7,opt,name=status,proto3,enum=ordersvc.v0.OrderStatus" json:"status,omitempty"`
	ExecutionProviderId uint64                 `protobuf:"varint,8,opt,name=execution_provider_id,json=executionProviderId,proto3" json:"execution_provider_id,omitempty"`
	OcoId               uint64                 `protobuf:"varint,9,opt,name=oco_id,json=ocoId,proto3" json:"oco_id,omitempty"`
	ParentId            uint64                 `protobuf:"varint,10,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	LinkedId            uint64                 `protobuf:"varint,11,opt,name=linked_id,json=linkedId,proto3" json:"linked_id,omitempty"`
	Admin               bool                   `protobuf:"varint,12,opt,name=admin,proto3" json:"admin,omitempty"`
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ordersvc_v0_ordersvc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_ordersvc_v0_ordersvc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_ordersvc_v0_ordersvc_proto_rawDescGZIP(), []int{0}
}

func (x *Order) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Order) GetAccountId() uint64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *Order) GetContractId() uint64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *Order) GetSpreadDefinitionId() uint64 {
	if x != nil {
		return x.SpreadDefinitionId
	}
	return 0
}

func (x *Order) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Order) GetAction() Action {
	if x != nil {
		return x.Action
	}
	return Action_ACTION_UNSPECIFIED
}

func (x *Order) GetStatus() OrderStatus {
	if x != nil {
		return x.Status
	}
	return OrderStatus_ORDER_STATUS_UNSPECIFIED
}

func (x *Order) GetExecutionProviderId() uint64 {
	if x != nil {
		return x.ExecutionProviderId
	}
	return 0
}

func (x *Order) GetOcoId() uint64 {
	if x != nil {
		return x.OcoId
	}
	return 0
}

func (x *Order) GetParentId() uint64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *Order) GetLinkedId() uint64 {
	if x != nil {
		return x.LinkedId
	}
	return 0
}

func (x *Order) GetAdmin() bool {
	if x != nil {
		return x.Admin
	}
	return false
}

type OtherOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action        Action                 `protobuf:"varint,1,opt,name=action,proto3,enum=ordersvc.v0.Action" json:"action,omitempty"`
	ClientOrderId string                 `protobuf:"bytes,2,opt,name=client_order_id,json=clientOrderId,proto3" json:"client_order_id,omitempty"`
	OrderType     OrderType              `protobuf:"varint,3,opt,name=order_type,json=orderType,proto3,enum=ordersvc.v0.OrderType" json:"order_type,omitempty"`
	Price         float64                `protobuf:"fixed64,4,opt,name=price,proto3" json:"price,omitempty"`
	StopPrice     float64                `protobuf:"fixed64,5,opt,name=stop_price,json=stopPrice,proto3" json:"stop_price,omitempty"`
	MaxShow       uint32                 `protobuf:"varint,6,opt,name=max_show,json=maxShow,proto3" json:"max_show,omitempty"`
	PegDifference float64                `protobuf:"fixed64,7,opt,name=peg_difference,json=pegDifference,proto3" json:"peg_difference,omitempty"`
	Tif           TIF                    `protobuf:"varint,8,opt,name=tif,proto3,enum=ordersvc.v0.TIF" json:"tif,omitempty"`
	ExpireTime    *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	Text          string                 `protobuf:"bytes,10,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *OtherOrder) Reset() {
	*x = OtherOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ordersvc_v0_ordersvc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtherOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtherOrder) ProtoMessage() {}

func (x *OtherOrder) ProtoReflect() protoreflect.Message {
	mi := &file_ordersvc_v0_ordersvc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtherOrder.ProtoReflect.Descriptor instead.
func (*OtherOrder) Descriptor() ([]byte, []int) {
	return file_ordersvc_v0_ordersvc_proto_rawDescGZIP(), []int{1}
}

func (x *OtherOrder) GetAction() Action {
	if x != nil {
		return x.Action
	}
	return Action_ACTION_UNSPECIFIED
}

func (x *OtherOrder) GetClientOrderId() string {
	if x != nil {
		return x.ClientOrderId
	}
	return ""
}

func (x *OtherOrder) GetOrderType() OrderType {
	if x != nil {
		return x.OrderType
	}
	return OrderType_ORDER_TYPE_UNSPECIFIED
}

func (x *OtherOrder) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *OtherOrder) GetStopPrice() float64 {
	if x != nil {
		return x.StopPrice
	}
	return 0
}

func (x *OtherOrder) GetMaxShow() uint32 {
	if x != nil {
		return x.MaxShow
	}
	return 0
}

func (x *OtherOrder) GetPegDifference() float64 {
	if x != nil {
		return x.PegDifference
	}
	return 0
}

func (x *OtherOrder) GetTif() TIF {
	if x != nil {
		return x.Tif
	}
	return TIF_TIF_UNSPECIFIED
}

func (x *OtherOrder) GetExpireTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireTime
	}
	return nil
}

func (x *OtherOrder) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// ====================================
// Create order
// ====================================
type CreateOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Account username (might not be a field for long, as the server will handle this value)
	AccountSpec string `protobuf:"bytes,1,opt,name=account_spec,json=accountSpec,proto3" json:"account_spec,omitempty"`
	// account ID (might not be a field for long, as the server will handle this value)
	AccountId int64 `protobuf:"varint,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// Client order ID, created for idempotency
	ClientOrderId  string                 `protobuf:"bytes,3,opt,name=client_order_id,json=clientOrderId,proto3" json:"client_order_id,omitempty"`
	Action         Action                 `protobuf:"varint,4,opt,name=action,proto3,enum=ordersvc.v0.Action" json:"action,omitempty"`
	Symbol         string                 `protobuf:"bytes,5,opt,name=symbol,proto3" json:"symbol,omitempty"`
	OrderQty       uint32                 `protobuf:"varint,6,opt,name=order_qty,json=orderQty,proto3" json:"order_qty,omitempty"`
	OrderType      OrderType              `protobuf:"varint,7,opt,name=order_type,json=orderType,proto3,enum=ordersvc.v0.OrderType" json:"order_type,omitempty"`
	Price          float64                `protobuf:"fixed64,8,opt,name=price,proto3" json:"price,omitempty"`
	StopPrice      float64                `protobuf:"fixed64,9,opt,name=stop_price,json=stopPrice,proto3" json:"stop_price,omitempty"`
	MaxShow        uint32                 `protobuf:"varint,10,opt,name=max_show,json=maxShow,proto3" json:"max_show,omitempty"`
	PegDifference  float64                `protobuf:"fixed64,11,opt,name=peg_difference,json=pegDifference,proto3" json:"peg_difference,omitempty"`
	TimeInForce    TIF                    `protobuf:"varint,12,opt,name=time_in_force,json=timeInForce,proto3,enum=ordersvc.v0.TIF" json:"time_in_force,omitempty"`
	ExpireTime     *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	Text           string                 `protobuf:"bytes,14,opt,name=text,proto3" json:"text,omitempty"`
	ActivationTime *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=activation_time,json=activationTime,proto3" json:"activation_time,omitempty"`
	CustomTag_50   string                 `protobuf:"bytes,16,opt,name=custom_tag_50,json=customTag50,proto3" json:"custom_tag_50,omitempty"`
}

func (x *CreateOrderRequest) Reset() {
	*x = CreateOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ordersvc_v0_ordersvc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrderRequest) ProtoMessage() {}

func (x *CreateOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ordersvc_v0_ordersvc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrderRequest.ProtoReflect.Descriptor instead.
func (*CreateOrderRequest) Descriptor() ([]byte, []int) {
	return file_ordersvc_v0_ordersvc_proto_rawDescGZIP(), []int{2}
}

func (x *CreateOrderRequest) GetAccountSpec() string {
	if x != nil {
		return x.AccountSpec
	}
	return ""
}

func (x *CreateOrderRequest) GetAccountId() int64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *CreateOrderRequest) GetClientOrderId() string {
	if x != nil {
		return x.ClientOrderId
	}
	return ""
}

func (x *CreateOrderRequest) GetAction() Action {
	if x != nil {
		return x.Action
	}
	return Action_ACTION_UNSPECIFIED
}

func (x *CreateOrderRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *CreateOrderRequest) GetOrderQty() uint32 {
	if x != nil {
		return x.OrderQty
	}
	return 0
}

func (x *CreateOrderRequest) GetOrderType() OrderType {
	if x != nil {
		return x.OrderType
	}
	return OrderType_ORDER_TYPE_UNSPECIFIED
}

func (x *CreateOrderRequest) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *CreateOrderRequest) GetStopPrice() float64 {
	if x != nil {
		return x.StopPrice
	}
	return 0
}

func (x *CreateOrderRequest) GetMaxShow() uint32 {
	if x != nil {
		return x.MaxShow
	}
	return 0
}

func (x *CreateOrderRequest) GetPegDifference() float64 {
	if x != nil {
		return x.PegDifference
	}
	return 0
}

func (x *CreateOrderRequest) GetTimeInForce() TIF {
	if x != nil {
		return x.TimeInForce
	}
	return TIF_TIF_UNSPECIFIED
}

func (x *CreateOrderRequest) GetExpireTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireTime
	}
	return nil
}

func (x *CreateOrderRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *CreateOrderRequest) GetActivationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ActivationTime
	}
	return nil
}

func (x *CreateOrderRequest) GetCustomTag_50() string {
	if x != nil {
		return x.CustomTag_50
	}
	return ""
}

type CreateOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId int64 `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
}

func (x *CreateOrderResponse) Reset() {
	*x = CreateOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ordersvc_v0_ordersvc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrderResponse) ProtoMessage() {}

func (x *CreateOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ordersvc_v0_ordersvc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrderResponse.ProtoReflect.Descriptor instead.
func (*CreateOrderResponse) Descriptor() ([]byte, []int) {
	return file_ordersvc_v0_ordersvc_proto_rawDescGZIP(), []int{3}
}

func (x *CreateOrderResponse) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

// ====================================
// OcoReq
// ====================================
type CreateOcoOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountSpec    string                 `protobuf:"bytes,1,opt,name=account_spec,json=accountSpec,proto3" json:"account_spec,omitempty"`
	AccountId      uint32                 `protobuf:"varint,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	ClientOrderId  string                 `protobuf:"bytes,3,opt,name=client_order_id,json=clientOrderId,proto3" json:"client_order_id,omitempty"`
	Action         Action                 `protobuf:"varint,4,opt,name=action,proto3,enum=ordersvc.v0.Action" json:"action,omitempty"`
	Symbol         string                 `protobuf:"bytes,5,opt,name=symbol,proto3" json:"symbol,omitempty"`
	OrderQty       uint32                 `protobuf:"varint,6,opt,name=order_qty,json=orderQty,proto3" json:"order_qty,omitempty"`
	OrderType      OrderType              `protobuf:"varint,7,opt,name=order_type,json=orderType,proto3,enum=ordersvc.v0.OrderType" json:"order_type,omitempty"`
	Price          float64                `protobuf:"fixed64,8,opt,name=price,proto3" json:"price,omitempty"`
	StopPrice      float64                `protobuf:"fixed64,9,opt,name=stop_price,json=stopPrice,proto3" json:"stop_price,omitempty"`
	MaxShow        uint32                 `protobuf:"varint,10,opt,name=max_show,json=maxShow,proto3" json:"max_show,omitempty"`
	PegDifference  float64                `protobuf:"fixed64,11,opt,name=peg_difference,json=pegDifference,proto3" json:"peg_difference,omitempty"`
	Tif            TIF                    `protobuf:"varint,12,opt,name=tif,proto3,enum=ordersvc.v0.TIF" json:"tif,omitempty"`
	ExpireTime     *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	Text           string                 `protobuf:"bytes,14,opt,name=text,proto3" json:"text,omitempty"`
	ActivationTime *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=activation_time,json=activationTime,proto3" json:"activation_time,omitempty"`
	CustomTag_50   string                 `protobuf:"bytes,16,opt,name=custom_tag_50,json=customTag50,proto3" json:"custom_tag_50,omitempty"`
	IsAutomated    bool                   `protobuf:"varint,17,opt,name=is_automated,json=isAutomated,proto3" json:"is_automated,omitempty"`
	Other          *OtherOrder            `protobuf:"bytes,18,opt,name=other,proto3" json:"other,omitempty"`
}

func (x *CreateOcoOrderRequest) Reset() {
	*x = CreateOcoOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ordersvc_v0_ordersvc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOcoOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOcoOrderRequest) ProtoMessage() {}

func (x *CreateOcoOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ordersvc_v0_ordersvc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOcoOrderRequest.ProtoReflect.Descriptor instead.
func (*CreateOcoOrderRequest) Descriptor() ([]byte, []int) {
	return file_ordersvc_v0_ordersvc_proto_rawDescGZIP(), []int{4}
}

func (x *CreateOcoOrderRequest) GetAccountSpec() string {
	if x != nil {
		return x.AccountSpec
	}
	return ""
}

func (x *CreateOcoOrderRequest) GetAccountId() uint32 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *CreateOcoOrderRequest) GetClientOrderId() string {
	if x != nil {
		return x.ClientOrderId
	}
	return ""
}

func (x *CreateOcoOrderRequest) GetAction() Action {
	if x != nil {
		return x.Action
	}
	return Action_ACTION_UNSPECIFIED
}

func (x *CreateOcoOrderRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *CreateOcoOrderRequest) GetOrderQty() uint32 {
	if x != nil {
		return x.OrderQty
	}
	return 0
}

func (x *CreateOcoOrderRequest) GetOrderType() OrderType {
	if x != nil {
		return x.OrderType
	}
	return OrderType_ORDER_TYPE_UNSPECIFIED
}

func (x *CreateOcoOrderRequest) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *CreateOcoOrderRequest) GetStopPrice() float64 {
	if x != nil {
		return x.StopPrice
	}
	return 0
}

func (x *CreateOcoOrderRequest) GetMaxShow() uint32 {
	if x != nil {
		return x.MaxShow
	}
	return 0
}

func (x *CreateOcoOrderRequest) GetPegDifference() float64 {
	if x != nil {
		return x.PegDifference
	}
	return 0
}

func (x *CreateOcoOrderRequest) GetTif() TIF {
	if x != nil {
		return x.Tif
	}
	return TIF_TIF_UNSPECIFIED
}

func (x *CreateOcoOrderRequest) GetExpireTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireTime
	}
	return nil
}

func (x *CreateOcoOrderRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *CreateOcoOrderRequest) GetActivationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ActivationTime
	}
	return nil
}

func (x *CreateOcoOrderRequest) GetCustomTag_50() string {
	if x != nil {
		return x.CustomTag_50
	}
	return ""
}

func (x *CreateOcoOrderRequest) GetIsAutomated() bool {
	if x != nil {
		return x.IsAutomated
	}
	return false
}

func (x *CreateOcoOrderRequest) GetOther() *OtherOrder {
	if x != nil {
		return x.Other
	}
	return nil
}

type CreateOcoOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId uint64 `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	OcoId   uint64 `protobuf:"varint,2,opt,name=oco_id,json=ocoId,proto3" json:"oco_id,omitempty"`
}

func (x *CreateOcoOrderResponse) Reset() {
	*x = CreateOcoOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ordersvc_v0_ordersvc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOcoOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOcoOrderResponse) ProtoMessage() {}

func (x *CreateOcoOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ordersvc_v0_ordersvc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOcoOrderResponse.ProtoReflect.Descriptor instead.
func (*CreateOcoOrderResponse) Descriptor() ([]byte, []int) {
	return file_ordersvc_v0_ordersvc_proto_rawDescGZIP(), []int{5}
}

func (x *CreateOcoOrderResponse) GetOrderId() uint64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *CreateOcoOrderResponse) GetOcoId() uint64 {
	if x != nil {
		return x.OcoId
	}
	return 0
}

// ====================================
// OsoOrder
// ====================================
type CreateOsoOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountSpec    string                 `protobuf:"bytes,1,opt,name=account_spec,json=accountSpec,proto3" json:"account_spec,omitempty"`
	AccountId      uint32                 `protobuf:"varint,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	ClientOrderId  string                 `protobuf:"bytes,3,opt,name=client_order_id,json=clientOrderId,proto3" json:"client_order_id,omitempty"`
	Action         Action                 `protobuf:"varint,4,opt,name=action,proto3,enum=ordersvc.v0.Action" json:"action,omitempty"`
	Symbol         string                 `protobuf:"bytes,5,opt,name=symbol,proto3" json:"symbol,omitempty"`
	OrderQty       uint32                 `protobuf:"varint,6,opt,name=order_qty,json=orderQty,proto3" json:"order_qty,omitempty"`
	OrderType      OrderType              `protobuf:"varint,7,opt,name=order_type,json=orderType,proto3,enum=ordersvc.v0.OrderType" json:"order_type,omitempty"`
	Price          float64                `protobuf:"fixed64,8,opt,name=price,proto3" json:"price,omitempty"`
	StopPrice      float64                `protobuf:"fixed64,9,opt,name=stop_price,json=stopPrice,proto3" json:"stop_price,omitempty"`
	MaxShow        uint32                 `protobuf:"varint,10,opt,name=max_show,json=maxShow,proto3" json:"max_show,omitempty"`
	PegDifference  float64                `protobuf:"fixed64,11,opt,name=peg_difference,json=pegDifference,proto3" json:"peg_difference,omitempty"`
	Tif            TIF                    `protobuf:"varint,12,opt,name=tif,proto3,enum=ordersvc.v0.TIF" json:"tif,omitempty"`
	ExpireTime     *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	Text           string                 `protobuf:"bytes,14,opt,name=text,proto3" json:"text,omitempty"`
	ActivationTime *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=activation_time,json=activationTime,proto3" json:"activation_time,omitempty"`
	CustomTag_50   string                 `protobuf:"bytes,16,opt,name=custom_tag_50,json=customTag50,proto3" json:"custom_tag_50,omitempty"`
	Bracket1       *OtherOrder            `protobuf:"bytes,17,opt,name=Bracket1,proto3" json:"Bracket1,omitempty"`
	Bracket2       *OtherOrder            `protobuf:"bytes,18,opt,name=Bracket2,proto3" json:"Bracket2,omitempty"`
}

func (x *CreateOsoOrderRequest) Reset() {
	*x = CreateOsoOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ordersvc_v0_ordersvc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOsoOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOsoOrderRequest) ProtoMessage() {}

func (x *CreateOsoOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ordersvc_v0_ordersvc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOsoOrderRequest.ProtoReflect.Descriptor instead.
func (*CreateOsoOrderRequest) Descriptor() ([]byte, []int) {
	return file_ordersvc_v0_ordersvc_proto_rawDescGZIP(), []int{6}
}

func (x *CreateOsoOrderRequest) GetAccountSpec() string {
	if x != nil {
		return x.AccountSpec
	}
	return ""
}

func (x *CreateOsoOrderRequest) GetAccountId() uint32 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *CreateOsoOrderRequest) GetClientOrderId() string {
	if x != nil {
		return x.ClientOrderId
	}
	return ""
}

func (x *CreateOsoOrderRequest) GetAction() Action {
	if x != nil {
		return x.Action
	}
	return Action_ACTION_UNSPECIFIED
}

func (x *CreateOsoOrderRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *CreateOsoOrderRequest) GetOrderQty() uint32 {
	if x != nil {
		return x.OrderQty
	}
	return 0
}

func (x *CreateOsoOrderRequest) GetOrderType() OrderType {
	if x != nil {
		return x.OrderType
	}
	return OrderType_ORDER_TYPE_UNSPECIFIED
}

func (x *CreateOsoOrderRequest) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *CreateOsoOrderRequest) GetStopPrice() float64 {
	if x != nil {
		return x.StopPrice
	}
	return 0
}

func (x *CreateOsoOrderRequest) GetMaxShow() uint32 {
	if x != nil {
		return x.MaxShow
	}
	return 0
}

func (x *CreateOsoOrderRequest) GetPegDifference() float64 {
	if x != nil {
		return x.PegDifference
	}
	return 0
}

func (x *CreateOsoOrderRequest) GetTif() TIF {
	if x != nil {
		return x.Tif
	}
	return TIF_TIF_UNSPECIFIED
}

func (x *CreateOsoOrderRequest) GetExpireTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireTime
	}
	return nil
}

func (x *CreateOsoOrderRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *CreateOsoOrderRequest) GetActivationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ActivationTime
	}
	return nil
}

func (x *CreateOsoOrderRequest) GetCustomTag_50() string {
	if x != nil {
		return x.CustomTag_50
	}
	return ""
}

func (x *CreateOsoOrderRequest) GetBracket1() *OtherOrder {
	if x != nil {
		return x.Bracket1
	}
	return nil
}

func (x *CreateOsoOrderRequest) GetBracket2() *OtherOrder {
	if x != nil {
		return x.Bracket2
	}
	return nil
}

type CreateOsoOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId    uint64 `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	Bracket1Id uint64 `protobuf:"varint,2,opt,name=bracket1_id,json=bracket1Id,proto3" json:"bracket1_id,omitempty"`
	Brakcet2Id uint64 `protobuf:"varint,3,opt,name=brakcet2_id,json=brakcet2Id,proto3" json:"brakcet2_id,omitempty"`
}

func (x *CreateOsoOrderResponse) Reset() {
	*x = CreateOsoOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ordersvc_v0_ordersvc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOsoOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOsoOrderResponse) ProtoMessage() {}

func (x *CreateOsoOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ordersvc_v0_ordersvc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOsoOrderResponse.ProtoReflect.Descriptor instead.
func (*CreateOsoOrderResponse) Descriptor() ([]byte, []int) {
	return file_ordersvc_v0_ordersvc_proto_rawDescGZIP(), []int{7}
}

func (x *CreateOsoOrderResponse) GetOrderId() uint64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *CreateOsoOrderResponse) GetBracket1Id() uint64 {
	if x != nil {
		return x.Bracket1Id
	}
	return 0
}

func (x *CreateOsoOrderResponse) GetBrakcet2Id() uint64 {
	if x != nil {
		return x.Brakcet2Id
	}
	return 0
}

var File_ordersvc_v0_ordersvc_proto protoreflect.FileDescriptor

var file_ordersvc_v0_ordersvc_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x76, 0x63, 0x2f, 0x76, 0x30, 0x2f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x76, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x30, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbd, 0x03, 0x0a, 0x05, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x12, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2b,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x30, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a,
	0x15, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x63, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x6f, 0x63, 0x6f, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x22, 0x84, 0x03, 0x0a, 0x0a, 0x4f, 0x74, 0x68,
	0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x76, 0x63, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x0a,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x30, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f,
	0x70, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73,
	0x74, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f,
	0x73, 0x68, 0x6f, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x53,
	0x68, 0x6f, 0x77, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x65, 0x67, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x65, 0x67,
	0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x03, 0x74, 0x69,
	0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x76, 0x63, 0x2e, 0x76, 0x30, 0x2e, 0x54, 0x49, 0x46, 0x52, 0x03, 0x74, 0x69, 0x66, 0x12, 0x3b,
	0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22,
	0xfe, 0x04, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x2b, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x30, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x71,
	0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x51,
	0x74, 0x79, 0x12, 0x35, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x76,
	0x63, 0x2e, 0x76, 0x30, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x6d, 0x61, 0x78, 0x53, 0x68, 0x6f, 0x77, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x65, 0x67,
	0x5f, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0d, 0x70, 0x65, 0x67, 0x44, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x34, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x76, 0x63, 0x2e, 0x76, 0x30, 0x2e, 0x54, 0x49, 0x46, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x49,
	0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x43, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x35, 0x30, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x61, 0x67, 0x35, 0x30,
	0x22, 0x30, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x22, 0xc1, 0x05, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x63, 0x6f,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x76,
	0x63, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x51, 0x74, 0x79, 0x12, 0x35, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x30, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x68, 0x6f, 0x77,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x53, 0x68, 0x6f, 0x77, 0x12,
	0x25, 0x0a, 0x0e, 0x70, 0x65, 0x67, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x65, 0x67, 0x44, 0x69, 0x66, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x03, 0x74, 0x69, 0x66, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x76, 0x63, 0x2e, 0x76,
	0x30, 0x2e, 0x54, 0x49, 0x46, 0x52, 0x03, 0x74, 0x69, 0x66, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x43, 0x0a, 0x0f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x35,
	0x30, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54,
	0x61, 0x67, 0x35, 0x30, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x76,
	0x63, 0x2e, 0x76, 0x30, 0x2e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x22, 0x4a, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x63, 0x6f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6f,
	0x63, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6f, 0x63, 0x6f,
	0x49, 0x64, 0x22, 0xd9, 0x05, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x73, 0x6f,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26,
	0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x76,
	0x63, 0x2e, 0x76, 0x30, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x51, 0x74, 0x79, 0x12, 0x35, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x30, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x68, 0x6f, 0x77,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x53, 0x68, 0x6f, 0x77, 0x12,
	0x25, 0x0a, 0x0e, 0x70, 0x65, 0x67, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x65, 0x67, 0x44, 0x69, 0x66, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x03, 0x74, 0x69, 0x66, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x76, 0x63, 0x2e, 0x76,
	0x30, 0x2e, 0x54, 0x49, 0x46, 0x52, 0x03, 0x74, 0x69, 0x66, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x43, 0x0a, 0x0f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x35,
	0x30, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54,
	0x61, 0x67, 0x35, 0x30, 0x12, 0x33, 0x0a, 0x08, 0x42, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x31,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x76,
	0x63, 0x2e, 0x76, 0x30, 0x2e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x08, 0x42, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x31, 0x12, 0x33, 0x0a, 0x08, 0x42, 0x72, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x32, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x30, 0x2e, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x08, 0x42, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x32, 0x22, 0x75,
	0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x73, 0x6f, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x31, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x31, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x72, 0x61, 0x6b, 0x63, 0x65, 0x74, 0x32,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x62, 0x72, 0x61, 0x6b, 0x63,
	0x65, 0x74, 0x32, 0x49, 0x64, 0x2a, 0x41, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x12, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x42, 0x55, 0x59, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x10, 0x02, 0x2a, 0xc7, 0x02, 0x0a, 0x0b, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x18, 0x0a,
	0x14, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x58,
	0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x49, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x04,
	0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10,
	0x05, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4e, 0x45, 0x57, 0x10, 0x06, 0x12,
	0x20, 0x0a, 0x1c, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10,
	0x07, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x1a, 0x0a, 0x16,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x53,
	0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x09, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x49, 0x4e, 0x47,
	0x10, 0x0a, 0x2a, 0xea, 0x01, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54,
	0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x49, 0x54, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x10, 0x03, 0x12, 0x12, 0x0a,
	0x0e, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x51, 0x54, 0x53, 0x10,
	0x04, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x54, 0x4f, 0x50, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x06,
	0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x52, 0x41, 0x49, 0x4c, 0x49, 0x4e, 0x47, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x07, 0x12, 0x20, 0x0a,
	0x1c, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x49,
	0x4c, 0x49, 0x4e, 0x47, 0x53, 0x54, 0x4f, 0x50, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x08, 0x2a,
	0x5b, 0x0a, 0x03, 0x54, 0x49, 0x46, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x49, 0x46, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x54,
	0x49, 0x46, 0x5f, 0x44, 0x41, 0x59, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x49, 0x46, 0x5f,
	0x46, 0x4f, 0x4b, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x49, 0x46, 0x5f, 0x47, 0x54, 0x43,
	0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x49, 0x46, 0x5f, 0x47, 0x54, 0x44, 0x10, 0x04, 0x12,
	0x0b, 0x0a, 0x07, 0x54, 0x49, 0x46, 0x5f, 0x49, 0x4f, 0x43, 0x10, 0x05, 0x32, 0x9c, 0x02, 0x0a,
	0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x52, 0x0a,
	0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x5b, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x63, 0x6f, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x22, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x76, 0x63, 0x2e, 0x76,
	0x30, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x63, 0x6f, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x76, 0x63, 0x2e, 0x76, 0x30, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x63, 0x6f, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b,
	0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x73, 0x6f, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x22, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x76, 0x63, 0x2e, 0x76, 0x30, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x73, 0x6f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x76, 0x63, 0x2e,
	0x76, 0x30, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x73, 0x6f, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x3a, 0x5a, 0x38, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x6e, 0x74, 0x68, 0x6f, 0x6e,
	0x79, 0x48, 0x65, 0x77, 0x69, 0x6e, 0x73, 0x2f, 0x74, 0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x6e, 0x2f,
	0x67, 0x6f, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x76, 0x63, 0x2f, 0x76, 0x30, 0x3b, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x76, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ordersvc_v0_ordersvc_proto_rawDescOnce sync.Once
	file_ordersvc_v0_ordersvc_proto_rawDescData = file_ordersvc_v0_ordersvc_proto_rawDesc
)

func file_ordersvc_v0_ordersvc_proto_rawDescGZIP() []byte {
	file_ordersvc_v0_ordersvc_proto_rawDescOnce.Do(func() {
		file_ordersvc_v0_ordersvc_proto_rawDescData = protoimpl.X.CompressGZIP(file_ordersvc_v0_ordersvc_proto_rawDescData)
	})
	return file_ordersvc_v0_ordersvc_proto_rawDescData
}

var file_ordersvc_v0_ordersvc_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_ordersvc_v0_ordersvc_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_ordersvc_v0_ordersvc_proto_goTypes = []interface{}{
	(Action)(0),                    // 0: ordersvc.v0.Action
	(OrderStatus)(0),               // 1: ordersvc.v0.OrderStatus
	(OrderType)(0),                 // 2: ordersvc.v0.OrderType
	(TIF)(0),                       // 3: ordersvc.v0.TIF
	(*Order)(nil),                  // 4: ordersvc.v0.Order
	(*OtherOrder)(nil),             // 5: ordersvc.v0.OtherOrder
	(*CreateOrderRequest)(nil),     // 6: ordersvc.v0.CreateOrderRequest
	(*CreateOrderResponse)(nil),    // 7: ordersvc.v0.CreateOrderResponse
	(*CreateOcoOrderRequest)(nil),  // 8: ordersvc.v0.CreateOcoOrderRequest
	(*CreateOcoOrderResponse)(nil), // 9: ordersvc.v0.CreateOcoOrderResponse
	(*CreateOsoOrderRequest)(nil),  // 10: ordersvc.v0.CreateOsoOrderRequest
	(*CreateOsoOrderResponse)(nil), // 11: ordersvc.v0.CreateOsoOrderResponse
	(*timestamppb.Timestamp)(nil),  // 12: google.protobuf.Timestamp
}
var file_ordersvc_v0_ordersvc_proto_depIdxs = []int32{
	12, // 0: ordersvc.v0.Order.timestamp:type_name -> google.protobuf.Timestamp
	0,  // 1: ordersvc.v0.Order.action:type_name -> ordersvc.v0.Action
	1,  // 2: ordersvc.v0.Order.status:type_name -> ordersvc.v0.OrderStatus
	0,  // 3: ordersvc.v0.OtherOrder.action:type_name -> ordersvc.v0.Action
	2,  // 4: ordersvc.v0.OtherOrder.order_type:type_name -> ordersvc.v0.OrderType
	3,  // 5: ordersvc.v0.OtherOrder.tif:type_name -> ordersvc.v0.TIF
	12, // 6: ordersvc.v0.OtherOrder.expire_time:type_name -> google.protobuf.Timestamp
	0,  // 7: ordersvc.v0.CreateOrderRequest.action:type_name -> ordersvc.v0.Action
	2,  // 8: ordersvc.v0.CreateOrderRequest.order_type:type_name -> ordersvc.v0.OrderType
	3,  // 9: ordersvc.v0.CreateOrderRequest.time_in_force:type_name -> ordersvc.v0.TIF
	12, // 10: ordersvc.v0.CreateOrderRequest.expire_time:type_name -> google.protobuf.Timestamp
	12, // 11: ordersvc.v0.CreateOrderRequest.activation_time:type_name -> google.protobuf.Timestamp
	0,  // 12: ordersvc.v0.CreateOcoOrderRequest.action:type_name -> ordersvc.v0.Action
	2,  // 13: ordersvc.v0.CreateOcoOrderRequest.order_type:type_name -> ordersvc.v0.OrderType
	3,  // 14: ordersvc.v0.CreateOcoOrderRequest.tif:type_name -> ordersvc.v0.TIF
	12, // 15: ordersvc.v0.CreateOcoOrderRequest.expire_time:type_name -> google.protobuf.Timestamp
	12, // 16: ordersvc.v0.CreateOcoOrderRequest.activation_time:type_name -> google.protobuf.Timestamp
	5,  // 17: ordersvc.v0.CreateOcoOrderRequest.other:type_name -> ordersvc.v0.OtherOrder
	0,  // 18: ordersvc.v0.CreateOsoOrderRequest.action:type_name -> ordersvc.v0.Action
	2,  // 19: ordersvc.v0.CreateOsoOrderRequest.order_type:type_name -> ordersvc.v0.OrderType
	3,  // 20: ordersvc.v0.CreateOsoOrderRequest.tif:type_name -> ordersvc.v0.TIF
	12, // 21: ordersvc.v0.CreateOsoOrderRequest.expire_time:type_name -> google.protobuf.Timestamp
	12, // 22: ordersvc.v0.CreateOsoOrderRequest.activation_time:type_name -> google.protobuf.Timestamp
	5,  // 23: ordersvc.v0.CreateOsoOrderRequest.Bracket1:type_name -> ordersvc.v0.OtherOrder
	5,  // 24: ordersvc.v0.CreateOsoOrderRequest.Bracket2:type_name -> ordersvc.v0.OtherOrder
	6,  // 25: ordersvc.v0.OrderService.CreateOrder:input_type -> ordersvc.v0.CreateOrderRequest
	8,  // 26: ordersvc.v0.OrderService.CreateOcoOrder:input_type -> ordersvc.v0.CreateOcoOrderRequest
	10, // 27: ordersvc.v0.OrderService.CreateOsoOrder:input_type -> ordersvc.v0.CreateOsoOrderRequest
	7,  // 28: ordersvc.v0.OrderService.CreateOrder:output_type -> ordersvc.v0.CreateOrderResponse
	9,  // 29: ordersvc.v0.OrderService.CreateOcoOrder:output_type -> ordersvc.v0.CreateOcoOrderResponse
	11, // 30: ordersvc.v0.OrderService.CreateOsoOrder:output_type -> ordersvc.v0.CreateOsoOrderResponse
	28, // [28:31] is the sub-list for method output_type
	25, // [25:28] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_ordersvc_v0_ordersvc_proto_init() }
func file_ordersvc_v0_ordersvc_proto_init() {
	if File_ordersvc_v0_ordersvc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ordersvc_v0_ordersvc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ordersvc_v0_ordersvc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtherOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ordersvc_v0_ordersvc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ordersvc_v0_ordersvc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ordersvc_v0_ordersvc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOcoOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ordersvc_v0_ordersvc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOcoOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ordersvc_v0_ordersvc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOsoOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ordersvc_v0_ordersvc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOsoOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ordersvc_v0_ordersvc_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ordersvc_v0_ordersvc_proto_goTypes,
		DependencyIndexes: file_ordersvc_v0_ordersvc_proto_depIdxs,
		EnumInfos:         file_ordersvc_v0_ordersvc_proto_enumTypes,
		MessageInfos:      file_ordersvc_v0_ordersvc_proto_msgTypes,
	}.Build()
	File_ordersvc_v0_ordersvc_proto = out.File
	file_ordersvc_v0_ordersvc_proto_rawDesc = nil
	file_ordersvc_v0_ordersvc_proto_goTypes = nil
	file_ordersvc_v0_ordersvc_proto_depIdxs = nil
}
