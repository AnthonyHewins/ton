// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: marketdata/v0/marketdata.proto

package marketdata

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Bar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp   *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Open        float64                `protobuf:"fixed64,2,opt,name=open,proto3" json:"open,omitempty"`
	High        float64                `protobuf:"fixed64,3,opt,name=high,proto3" json:"high,omitempty"`
	Low         float64                `protobuf:"fixed64,4,opt,name=low,proto3" json:"low,omitempty"`
	Close       float64                `protobuf:"fixed64,5,opt,name=close,proto3" json:"close,omitempty"`
	UpVolume    float64                `protobuf:"fixed64,6,opt,name=up_volume,json=upVolume,proto3" json:"up_volume,omitempty"`
	DownVolume  float64                `protobuf:"fixed64,7,opt,name=down_volume,json=downVolume,proto3" json:"down_volume,omitempty"`
	UpTicks     float64                `protobuf:"fixed64,8,opt,name=up_ticks,json=upTicks,proto3" json:"up_ticks,omitempty"`
	DownTicks   float64                `protobuf:"fixed64,9,opt,name=down_ticks,json=downTicks,proto3" json:"down_ticks,omitempty"`
	BidVolume   float64                `protobuf:"fixed64,10,opt,name=bid_volume,json=bidVolume,proto3" json:"bid_volume,omitempty"`
	OfferVolume float64                `protobuf:"fixed64,11,opt,name=offer_volume,json=offerVolume,proto3" json:"offer_volume,omitempty"`
}

func (x *Bar) Reset() {
	*x = Bar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_v0_marketdata_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bar) ProtoMessage() {}

func (x *Bar) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_v0_marketdata_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bar.ProtoReflect.Descriptor instead.
func (*Bar) Descriptor() ([]byte, []int) {
	return file_marketdata_v0_marketdata_proto_rawDescGZIP(), []int{0}
}

func (x *Bar) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Bar) GetOpen() float64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *Bar) GetHigh() float64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *Bar) GetLow() float64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *Bar) GetClose() float64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *Bar) GetUpVolume() float64 {
	if x != nil {
		return x.UpVolume
	}
	return 0
}

func (x *Bar) GetDownVolume() float64 {
	if x != nil {
		return x.DownVolume
	}
	return 0
}

func (x *Bar) GetUpTicks() float64 {
	if x != nil {
		return x.UpTicks
	}
	return 0
}

func (x *Bar) GetDownTicks() float64 {
	if x != nil {
		return x.DownTicks
	}
	return 0
}

func (x *Bar) GetBidVolume() float64 {
	if x != nil {
		return x.BidVolume
	}
	return 0
}

func (x *Bar) GetOfferVolume() float64 {
	if x != nil {
		return x.OfferVolume
	}
	return 0
}

type Tick struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	RelativeTime     int64   `protobuf:"varint,2,opt,name=relative_time,json=relativeTime,proto3" json:"relative_time,omitempty"`
	RelativePrice    int64   `protobuf:"varint,3,opt,name=relative_price,json=relativePrice,proto3" json:"relative_price,omitempty"`
	Volume           int64   `protobuf:"varint,4,opt,name=volume,proto3" json:"volume,omitempty"`
	RelativeBidPrice float64 `protobuf:"fixed64,5,opt,name=relative_bid_price,json=relativeBidPrice,proto3" json:"relative_bid_price,omitempty"`
	RelativeAskPrice float64 `protobuf:"fixed64,6,opt,name=relative_ask_price,json=relativeAskPrice,proto3" json:"relative_ask_price,omitempty"`
	BidSize          float64 `protobuf:"fixed64,7,opt,name=bid_size,json=bidSize,proto3" json:"bid_size,omitempty"`
	AskSize          float64 `protobuf:"fixed64,8,opt,name=ask_size,json=askSize,proto3" json:"ask_size,omitempty"`
}

func (x *Tick) Reset() {
	*x = Tick{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_v0_marketdata_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tick) ProtoMessage() {}

func (x *Tick) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_v0_marketdata_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tick.ProtoReflect.Descriptor instead.
func (*Tick) Descriptor() ([]byte, []int) {
	return file_marketdata_v0_marketdata_proto_rawDescGZIP(), []int{1}
}

func (x *Tick) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Tick) GetRelativeTime() int64 {
	if x != nil {
		return x.RelativeTime
	}
	return 0
}

func (x *Tick) GetRelativePrice() int64 {
	if x != nil {
		return x.RelativePrice
	}
	return 0
}

func (x *Tick) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *Tick) GetRelativeBidPrice() float64 {
	if x != nil {
		return x.RelativeBidPrice
	}
	return 0
}

func (x *Tick) GetRelativeAskPrice() float64 {
	if x != nil {
		return x.RelativeAskPrice
	}
	return 0
}

func (x *Tick) GetBidSize() float64 {
	if x != nil {
		return x.BidSize
	}
	return 0
}

func (x *Tick) GetAskSize() float64 {
	if x != nil {
		return x.AskSize
	}
	return 0
}

type TickChart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TradeDate     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=trade_date,json=tradeDate,proto3" json:"trade_date,omitempty"`
	EndOfHistory  bool                   `protobuf:"varint,3,opt,name=end_of_history,json=endOfHistory,proto3" json:"end_of_history,omitempty"`
	Source        string                 `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	BasePrice     int64                  `protobuf:"varint,5,opt,name=base_price,json=basePrice,proto3" json:"base_price,omitempty"`
	BaseTimestamp *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=base_timestamp,json=baseTimestamp,proto3" json:"base_timestamp,omitempty"`
	TickSize      float64                `protobuf:"fixed64,7,opt,name=tick_size,json=tickSize,proto3" json:"tick_size,omitempty"`
	Ticks         []*Tick                `protobuf:"bytes,8,rep,name=ticks,proto3" json:"ticks,omitempty"`
}

func (x *TickChart) Reset() {
	*x = TickChart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_v0_marketdata_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TickChart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TickChart) ProtoMessage() {}

func (x *TickChart) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_v0_marketdata_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TickChart.ProtoReflect.Descriptor instead.
func (*TickChart) Descriptor() ([]byte, []int) {
	return file_marketdata_v0_marketdata_proto_rawDescGZIP(), []int{2}
}

func (x *TickChart) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TickChart) GetTradeDate() *timestamppb.Timestamp {
	if x != nil {
		return x.TradeDate
	}
	return nil
}

func (x *TickChart) GetEndOfHistory() bool {
	if x != nil {
		return x.EndOfHistory
	}
	return false
}

func (x *TickChart) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *TickChart) GetBasePrice() int64 {
	if x != nil {
		return x.BasePrice
	}
	return 0
}

func (x *TickChart) GetBaseTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.BaseTimestamp
	}
	return nil
}

func (x *TickChart) GetTickSize() float64 {
	if x != nil {
		return x.TickSize
	}
	return 0
}

func (x *TickChart) GetTicks() []*Tick {
	if x != nil {
		return x.Ticks
	}
	return nil
}

type BarChart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TradeDate *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=trade_date,json=tradeDate,proto3" json:"trade_date,omitempty"`
	Bars      []*Bar                 `protobuf:"bytes,3,rep,name=bars,proto3" json:"bars,omitempty"`
}

func (x *BarChart) Reset() {
	*x = BarChart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_v0_marketdata_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BarChart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BarChart) ProtoMessage() {}

func (x *BarChart) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_v0_marketdata_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BarChart.ProtoReflect.Descriptor instead.
func (*BarChart) Descriptor() ([]byte, []int) {
	return file_marketdata_v0_marketdata_proto_rawDescGZIP(), []int{3}
}

func (x *BarChart) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BarChart) GetTradeDate() *timestamppb.Timestamp {
	if x != nil {
		return x.TradeDate
	}
	return nil
}

func (x *BarChart) GetBars() []*Bar {
	if x != nil {
		return x.Bars
	}
	return nil
}

type PriceQty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price float64 `protobuf:"fixed64,1,opt,name=price,proto3" json:"price,omitempty"`
	Size  float64 `protobuf:"fixed64,2,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *PriceQty) Reset() {
	*x = PriceQty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_v0_marketdata_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceQty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceQty) ProtoMessage() {}

func (x *PriceQty) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_v0_marketdata_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceQty.ProtoReflect.Descriptor instead.
func (*PriceQty) Descriptor() ([]byte, []int) {
	return file_marketdata_v0_marketdata_proto_rawDescGZIP(), []int{4}
}

func (x *PriceQty) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *PriceQty) GetSize() float64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type DOMs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Doms []*DOM `protobuf:"bytes,1,rep,name=doms,proto3" json:"doms,omitempty"`
}

func (x *DOMs) Reset() {
	*x = DOMs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_v0_marketdata_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DOMs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DOMs) ProtoMessage() {}

func (x *DOMs) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_v0_marketdata_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DOMs.ProtoReflect.Descriptor instead.
func (*DOMs) Descriptor() ([]byte, []int) {
	return file_marketdata_v0_marketdata_proto_rawDescGZIP(), []int{5}
}

func (x *DOMs) GetDoms() []*DOM {
	if x != nil {
		return x.Doms
	}
	return nil
}

type DOM struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId int64                  `protobuf:"varint,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	Timestamp  *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Bids       []*PriceQty            `protobuf:"bytes,3,rep,name=bids,proto3" json:"bids,omitempty"`
	Offers     []*PriceQty            `protobuf:"bytes,4,rep,name=offers,proto3" json:"offers,omitempty"`
}

func (x *DOM) Reset() {
	*x = DOM{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_v0_marketdata_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DOM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DOM) ProtoMessage() {}

func (x *DOM) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_v0_marketdata_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DOM.ProtoReflect.Descriptor instead.
func (*DOM) Descriptor() ([]byte, []int) {
	return file_marketdata_v0_marketdata_proto_rawDescGZIP(), []int{6}
}

func (x *DOM) GetContractId() int64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *DOM) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *DOM) GetBids() []*PriceQty {
	if x != nil {
		return x.Bids
	}
	return nil
}

func (x *DOM) GetOffers() []*PriceQty {
	if x != nil {
		return x.Offers
	}
	return nil
}

type Quotes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Quotes []*Quote `protobuf:"bytes,1,rep,name=quotes,proto3" json:"quotes,omitempty"`
}

func (x *Quotes) Reset() {
	*x = Quotes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_v0_marketdata_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Quotes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quotes) ProtoMessage() {}

func (x *Quotes) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_v0_marketdata_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quotes.ProtoReflect.Descriptor instead.
func (*Quotes) Descriptor() ([]byte, []int) {
	return file_marketdata_v0_marketdata_proto_rawDescGZIP(), []int{7}
}

func (x *Quotes) GetQuotes() []*Quote {
	if x != nil {
		return x.Quotes
	}
	return nil
}

type Quote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId       int64                  `protobuf:"varint,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	Timestamp        *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Bid              *PriceQty              `protobuf:"bytes,3,opt,name=bid,proto3" json:"bid,omitempty"`
	Offer            *PriceQty              `protobuf:"bytes,4,opt,name=offer,proto3" json:"offer,omitempty"`
	Trade            *PriceQty              `protobuf:"bytes,5,opt,name=trade,proto3" json:"trade,omitempty"`
	TotalTradeVolume float64                `protobuf:"fixed64,6,opt,name=total_trade_volume,json=totalTradeVolume,proto3" json:"total_trade_volume,omitempty"`
	OpenInterest     float64                `protobuf:"fixed64,7,opt,name=open_interest,json=openInterest,proto3" json:"open_interest,omitempty"`
	LowPrice         float64                `protobuf:"fixed64,8,opt,name=low_price,json=lowPrice,proto3" json:"low_price,omitempty"`
	OpeningPrice     float64                `protobuf:"fixed64,9,opt,name=opening_price,json=openingPrice,proto3" json:"opening_price,omitempty"`
	HighPrice        float64                `protobuf:"fixed64,10,opt,name=high_price,json=highPrice,proto3" json:"high_price,omitempty"`
	SettlementPrice  float64                `protobuf:"fixed64,11,opt,name=settlement_price,json=settlementPrice,proto3" json:"settlement_price,omitempty"`
}

func (x *Quote) Reset() {
	*x = Quote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_v0_marketdata_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Quote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quote) ProtoMessage() {}

func (x *Quote) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_v0_marketdata_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quote.ProtoReflect.Descriptor instead.
func (*Quote) Descriptor() ([]byte, []int) {
	return file_marketdata_v0_marketdata_proto_rawDescGZIP(), []int{8}
}

func (x *Quote) GetContractId() int64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *Quote) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Quote) GetBid() *PriceQty {
	if x != nil {
		return x.Bid
	}
	return nil
}

func (x *Quote) GetOffer() *PriceQty {
	if x != nil {
		return x.Offer
	}
	return nil
}

func (x *Quote) GetTrade() *PriceQty {
	if x != nil {
		return x.Trade
	}
	return nil
}

func (x *Quote) GetTotalTradeVolume() float64 {
	if x != nil {
		return x.TotalTradeVolume
	}
	return 0
}

func (x *Quote) GetOpenInterest() float64 {
	if x != nil {
		return x.OpenInterest
	}
	return 0
}

func (x *Quote) GetLowPrice() float64 {
	if x != nil {
		return x.LowPrice
	}
	return 0
}

func (x *Quote) GetOpeningPrice() float64 {
	if x != nil {
		return x.OpeningPrice
	}
	return 0
}

func (x *Quote) GetHighPrice() float64 {
	if x != nil {
		return x.HighPrice
	}
	return 0
}

func (x *Quote) GetSettlementPrice() float64 {
	if x != nil {
		return x.SettlementPrice
	}
	return 0
}

type Histograms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Histograms []*Histogram `protobuf:"bytes,1,rep,name=histograms,proto3" json:"histograms,omitempty"`
}

func (x *Histograms) Reset() {
	*x = Histograms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_v0_marketdata_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Histograms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Histograms) ProtoMessage() {}

func (x *Histograms) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_v0_marketdata_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Histograms.ProtoReflect.Descriptor instead.
func (*Histograms) Descriptor() ([]byte, []int) {
	return file_marketdata_v0_marketdata_proto_rawDescGZIP(), []int{9}
}

func (x *Histograms) GetHistograms() []*Histogram {
	if x != nil {
		return x.Histograms
	}
	return nil
}

type Histogram struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId int64                  `protobuf:"varint,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	Timestamp  *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	TradeDate  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=trade_date,json=tradeDate,proto3" json:"trade_date,omitempty"`
	Base       float64                `protobuf:"fixed64,4,opt,name=base,proto3" json:"base,omitempty"`
	Items      map[string]float64     `protobuf:"bytes,5,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	Refresh    bool                   `protobuf:"varint,6,opt,name=refresh,proto3" json:"refresh,omitempty"`
}

func (x *Histogram) Reset() {
	*x = Histogram{}
	if protoimpl.UnsafeEnabled {
		mi := &file_marketdata_v0_marketdata_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Histogram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Histogram) ProtoMessage() {}

func (x *Histogram) ProtoReflect() protoreflect.Message {
	mi := &file_marketdata_v0_marketdata_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Histogram.ProtoReflect.Descriptor instead.
func (*Histogram) Descriptor() ([]byte, []int) {
	return file_marketdata_v0_marketdata_proto_rawDescGZIP(), []int{10}
}

func (x *Histogram) GetContractId() int64 {
	if x != nil {
		return x.ContractId
	}
	return 0
}

func (x *Histogram) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Histogram) GetTradeDate() *timestamppb.Timestamp {
	if x != nil {
		return x.TradeDate
	}
	return nil
}

func (x *Histogram) GetBase() float64 {
	if x != nil {
		return x.Base
	}
	return 0
}

func (x *Histogram) GetItems() map[string]float64 {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *Histogram) GetRefresh() bool {
	if x != nil {
		return x.Refresh
	}
	return false
}

var File_marketdata_v0_marketdata_proto protoreflect.FileDescriptor

var file_marketdata_v0_marketdata_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x76, 0x30, 0x2f,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x30, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xc9, 0x02, 0x0a, 0x03, 0x42, 0x61, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f,
	0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x75, 0x70, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x64, 0x6f, 0x77, 0x6e, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x75, 0x70, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x75, 0x70, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64,
	0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x64, 0x6f, 0x77, 0x6e, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69,
	0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x62, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x66, 0x66,
	0x65, 0x72, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x8c, 0x02, 0x0a,
	0x04, 0x54, 0x69, 0x63, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x42,
	0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x41, 0x73, 0x6b,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x69, 0x64, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x69, 0x64, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xbe, 0x02, 0x0a, 0x09,
	0x54, 0x69, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x65, 0x6e,
	0x64, 0x4f, 0x66, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x41, 0x0a, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74, 0x69, 0x63, 0x6b, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x29, 0x0a, 0x05, 0x74, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x30,
	0x2e, 0x54, 0x69, 0x63, 0x6b, 0x52, 0x05, 0x74, 0x69, 0x63, 0x6b, 0x73, 0x22, 0x7d, 0x0a, 0x08,
	0x42, 0x61, 0x72, 0x43, 0x68, 0x61, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x62, 0x61, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76,
	0x30, 0x2e, 0x42, 0x61, 0x72, 0x52, 0x04, 0x62, 0x61, 0x72, 0x73, 0x22, 0x34, 0x0a, 0x08, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x51, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x22, 0x2e, 0x0a, 0x04, 0x44, 0x4f, 0x4d, 0x73, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x6f, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x30, 0x2e, 0x44, 0x4f, 0x4d, 0x52, 0x04, 0x64, 0x6f, 0x6d,
	0x73, 0x22, 0xbe, 0x01, 0x0a, 0x03, 0x44, 0x4f, 0x4d, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x2b, 0x0a, 0x04, 0x62, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x76, 0x30, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x51, 0x74, 0x79, 0x52, 0x04, 0x62, 0x69, 0x64,
	0x73, 0x12, 0x2f, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76,
	0x30, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x51, 0x74, 0x79, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x65,
	0x72, 0x73, 0x22, 0x36, 0x0a, 0x06, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x06,
	0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x30, 0x2e, 0x51, 0x75, 0x6f,
	0x74, 0x65, 0x52, 0x06, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x22, 0xca, 0x03, 0x0a, 0x05, 0x51,
	0x75, 0x6f, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x29, 0x0a, 0x03, 0x62, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x30, 0x2e, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x51, 0x74, 0x79, 0x52, 0x03, 0x62, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x6f, 0x66,
	0x66, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x30, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x51,
	0x74, 0x79, 0x52, 0x05, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x05, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x30, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x51, 0x74,
	0x79, 0x52, 0x05, 0x74, 0x72, 0x61, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6f,
	0x70, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6c,
	0x6f, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x68, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x46, 0x0a, 0x0a, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x30, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x52, 0x0a, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x22,
	0xc4, 0x02, 0x0a, 0x09, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x38,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x39, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x76, 0x30, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x1a, 0x38, 0x0a, 0x0a,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x3e, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x6e, 0x74, 0x68, 0x6f, 0x6e, 0x79, 0x48, 0x65, 0x77, 0x69,
	0x6e, 0x73, 0x2f, 0x74, 0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x76, 0x30, 0x3b, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_marketdata_v0_marketdata_proto_rawDescOnce sync.Once
	file_marketdata_v0_marketdata_proto_rawDescData = file_marketdata_v0_marketdata_proto_rawDesc
)

func file_marketdata_v0_marketdata_proto_rawDescGZIP() []byte {
	file_marketdata_v0_marketdata_proto_rawDescOnce.Do(func() {
		file_marketdata_v0_marketdata_proto_rawDescData = protoimpl.X.CompressGZIP(file_marketdata_v0_marketdata_proto_rawDescData)
	})
	return file_marketdata_v0_marketdata_proto_rawDescData
}

var file_marketdata_v0_marketdata_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_marketdata_v0_marketdata_proto_goTypes = []interface{}{
	(*Bar)(nil),                   // 0: marketdata.v0.Bar
	(*Tick)(nil),                  // 1: marketdata.v0.Tick
	(*TickChart)(nil),             // 2: marketdata.v0.TickChart
	(*BarChart)(nil),              // 3: marketdata.v0.BarChart
	(*PriceQty)(nil),              // 4: marketdata.v0.PriceQty
	(*DOMs)(nil),                  // 5: marketdata.v0.DOMs
	(*DOM)(nil),                   // 6: marketdata.v0.DOM
	(*Quotes)(nil),                // 7: marketdata.v0.Quotes
	(*Quote)(nil),                 // 8: marketdata.v0.Quote
	(*Histograms)(nil),            // 9: marketdata.v0.Histograms
	(*Histogram)(nil),             // 10: marketdata.v0.Histogram
	nil,                           // 11: marketdata.v0.Histogram.ItemsEntry
	(*timestamppb.Timestamp)(nil), // 12: google.protobuf.Timestamp
}
var file_marketdata_v0_marketdata_proto_depIdxs = []int32{
	12, // 0: marketdata.v0.Bar.timestamp:type_name -> google.protobuf.Timestamp
	12, // 1: marketdata.v0.TickChart.trade_date:type_name -> google.protobuf.Timestamp
	12, // 2: marketdata.v0.TickChart.base_timestamp:type_name -> google.protobuf.Timestamp
	1,  // 3: marketdata.v0.TickChart.ticks:type_name -> marketdata.v0.Tick
	12, // 4: marketdata.v0.BarChart.trade_date:type_name -> google.protobuf.Timestamp
	0,  // 5: marketdata.v0.BarChart.bars:type_name -> marketdata.v0.Bar
	6,  // 6: marketdata.v0.DOMs.doms:type_name -> marketdata.v0.DOM
	12, // 7: marketdata.v0.DOM.timestamp:type_name -> google.protobuf.Timestamp
	4,  // 8: marketdata.v0.DOM.bids:type_name -> marketdata.v0.PriceQty
	4,  // 9: marketdata.v0.DOM.offers:type_name -> marketdata.v0.PriceQty
	8,  // 10: marketdata.v0.Quotes.quotes:type_name -> marketdata.v0.Quote
	12, // 11: marketdata.v0.Quote.timestamp:type_name -> google.protobuf.Timestamp
	4,  // 12: marketdata.v0.Quote.bid:type_name -> marketdata.v0.PriceQty
	4,  // 13: marketdata.v0.Quote.offer:type_name -> marketdata.v0.PriceQty
	4,  // 14: marketdata.v0.Quote.trade:type_name -> marketdata.v0.PriceQty
	10, // 15: marketdata.v0.Histograms.histograms:type_name -> marketdata.v0.Histogram
	12, // 16: marketdata.v0.Histogram.timestamp:type_name -> google.protobuf.Timestamp
	12, // 17: marketdata.v0.Histogram.trade_date:type_name -> google.protobuf.Timestamp
	11, // 18: marketdata.v0.Histogram.items:type_name -> marketdata.v0.Histogram.ItemsEntry
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_marketdata_v0_marketdata_proto_init() }
func file_marketdata_v0_marketdata_proto_init() {
	if File_marketdata_v0_marketdata_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_marketdata_v0_marketdata_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketdata_v0_marketdata_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tick); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketdata_v0_marketdata_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TickChart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketdata_v0_marketdata_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BarChart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketdata_v0_marketdata_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceQty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketdata_v0_marketdata_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DOMs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketdata_v0_marketdata_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DOM); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketdata_v0_marketdata_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Quotes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketdata_v0_marketdata_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Quote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketdata_v0_marketdata_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Histograms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_marketdata_v0_marketdata_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Histogram); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_marketdata_v0_marketdata_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_marketdata_v0_marketdata_proto_goTypes,
		DependencyIndexes: file_marketdata_v0_marketdata_proto_depIdxs,
		MessageInfos:      file_marketdata_v0_marketdata_proto_msgTypes,
	}.Build()
	File_marketdata_v0_marketdata_proto = out.File
	file_marketdata_v0_marketdata_proto_rawDesc = nil
	file_marketdata_v0_marketdata_proto_goTypes = nil
	file_marketdata_v0_marketdata_proto_depIdxs = nil
}
