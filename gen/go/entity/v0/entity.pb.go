// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: entity/v0/entity.proto

package entity

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Event int32

const (
	Event_EVENT_UNSPECIFIED Event = 0
	Event_EVENT_CREATED     Event = 1
	Event_EVENT_UPDATED     Event = 2
	Event_EVENT_DELETED     Event = 3
)

// Enum value maps for Event.
var (
	Event_name = map[int32]string{
		0: "EVENT_UNSPECIFIED",
		1: "EVENT_CREATED",
		2: "EVENT_UPDATED",
		3: "EVENT_DELETED",
	}
	Event_value = map[string]int32{
		"EVENT_UNSPECIFIED": 0,
		"EVENT_CREATED":     1,
		"EVENT_UPDATED":     2,
		"EVENT_DELETED":     3,
	}
)

func (x Event) Enum() *Event {
	p := new(Event)
	*p = x
	return p
}

func (x Event) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Event) Descriptor() protoreflect.EnumDescriptor {
	return file_entity_v0_entity_proto_enumTypes[0].Descriptor()
}

func (Event) Type() protoreflect.EnumType {
	return &file_entity_v0_entity_proto_enumTypes[0]
}

func (x Event) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Event.Descriptor instead.
func (Event) EnumDescriptor() ([]byte, []int) {
	return file_entity_v0_entity_proto_rawDescGZIP(), []int{0}
}

type EntityType int32

const (
	EntityType_ENTITY_TYPE_UNSPECIFIED                             EntityType = 0
	EntityType_ENTITY_TYPE_ACCOUNT                                 EntityType = 1
	EntityType_ENTITY_TYPE_ACCOUNT_RISK_STATUS                     EntityType = 2
	EntityType_ENTITY_TYPE_ADMIN_ALERT                             EntityType = 3
	EntityType_ENTITY_TYPE_ADMIN_ALERT_SIGNAL                      EntityType = 4
	EntityType_ENTITY_TYPE_CASH_BALANCE                            EntityType = 5
	EntityType_ENTITY_TYPE_CASH_BALANCE_LOG                        EntityType = 6
	EntityType_ENTITY_TYPE_CHAT                                    EntityType = 7
	EntityType_ENTITY_TYPE_CHAT_MESSAGE                            EntityType = 8
	EntityType_ENTITY_TYPE_CLEARING_HOUSE                          EntityType = 9
	EntityType_ENTITY_TYPE_COMMAND                                 EntityType = 10
	EntityType_ENTITY_TYPE_COMMAND_REPORT                          EntityType = 11
	EntityType_ENTITY_TYPE_CONTACT_INFO                            EntityType = 12
	EntityType_ENTITY_TYPE_CONTRACT                                EntityType = 13
	EntityType_ENTITY_TYPE_CONTRACT_GROUP                          EntityType = 14
	EntityType_ENTITY_TYPE_CONTRACT_MARGIN                         EntityType = 15
	EntityType_ENTITY_TYPE_CONTRACT_MATURITY                       EntityType = 16
	EntityType_ENTITY_TYPE_CURRENCY                                EntityType = 17
	EntityType_ENTITY_TYPE_CURRENCY_RATE                           EntityType = 18
	EntityType_ENTITY_TYPE_ENTITLEMENT                             EntityType = 19
	EntityType_ENTITY_TYPE_EXCHANGE                                EntityType = 20
	EntityType_ENTITY_TYPE_EXECUTION_REPORT                        EntityType = 21
	EntityType_ENTITY_TYPE_FILL                                    EntityType = 22
	EntityType_ENTITY_TYPE_FILL_FEE                                EntityType = 23
	EntityType_ENTITY_TYPE_FILL_PAIR                               EntityType = 24
	EntityType_ENTITY_TYPE_MARGIN_SNAPSHOT                         EntityType = 25
	EntityType_ENTITY_TYPE_MARKET_DATA_SUBSCRIPTION                EntityType = 26
	EntityType_ENTITY_TYPE_MARKET_DATA_SUBSCRIPTION_EXCHANGE_SCOPE EntityType = 27
	EntityType_ENTITY_TYPE_MARKET_DATA_SUBSCRIPTION_PLAN           EntityType = 28
	EntityType_ENTITY_TYPE_ORDER_STRATEGY                          EntityType = 29
	EntityType_ENTITY_TYPE_ORDER_STRATEGY_LINK                     EntityType = 30
	EntityType_ENTITY_TYPE_ORDER_STRATEGY_TYPE                     EntityType = 31
	EntityType_ENTITY_TYPE_ORDER_VERSION                           EntityType = 32
	EntityType_ENTITY_TYPE_ORGANIZATION                            EntityType = 33
	EntityType_ENTITY_TYPE_PERMISSIONED_ACCOUNT_AUTO_LIQ           EntityType = 34
	EntityType_ENTITY_TYPE_POSITION                                EntityType = 35
	EntityType_ENTITY_TYPE_PRODUCT                                 EntityType = 36
	EntityType_ENTITY_TYPE_PRODUCT_MARGIN                          EntityType = 37
	EntityType_ENTITY_TYPE_PRODUCT_SESSION                         EntityType = 38
	EntityType_ENTITY_TYPE_PROPERTY                                EntityType = 39
	EntityType_ENTITY_TYPE_SECOND_MARKET_DATA_SUBSCRIPTION         EntityType = 40
	EntityType_ENTITY_TYPE_SPREAD_DEFINITION                       EntityType = 41
	EntityType_ENTITY_TYPE_TRADING_PERMISSION                      EntityType = 42
	EntityType_ENTITY_TYPE_TRADOVATE_SUBSCRIPTION                  EntityType = 43
	EntityType_ENTITY_TYPE_TRADOVATE_SUBSCRIPTION_PLAN             EntityType = 44
	EntityType_ENTITY_TYPE_USER                                    EntityType = 45
	EntityType_ENTITY_TYPE_USER_ACCOUNT_AUTO_LIQ                   EntityType = 46
	EntityType_ENTITY_TYPE_USER_ACCOUNT_POSITION_LIMIT             EntityType = 47
	EntityType_ENTITY_TYPE_USER_ACCOUNT_RISK_PARAMETER             EntityType = 48
	EntityType_ENTITY_TYPE_USER_PLUGIN                             EntityType = 49
	EntityType_ENTITY_TYPE_USER_PROPERTY                           EntityType = 50
	EntityType_ENTITY_TYPE_USER_SESSION                            EntityType = 51
	EntityType_ENTITY_TYPE_USER_SESSION_STATS                      EntityType = 52
)

// Enum value maps for EntityType.
var (
	EntityType_name = map[int32]string{
		0:  "ENTITY_TYPE_UNSPECIFIED",
		1:  "ENTITY_TYPE_ACCOUNT",
		2:  "ENTITY_TYPE_ACCOUNT_RISK_STATUS",
		3:  "ENTITY_TYPE_ADMIN_ALERT",
		4:  "ENTITY_TYPE_ADMIN_ALERT_SIGNAL",
		5:  "ENTITY_TYPE_CASH_BALANCE",
		6:  "ENTITY_TYPE_CASH_BALANCE_LOG",
		7:  "ENTITY_TYPE_CHAT",
		8:  "ENTITY_TYPE_CHAT_MESSAGE",
		9:  "ENTITY_TYPE_CLEARING_HOUSE",
		10: "ENTITY_TYPE_COMMAND",
		11: "ENTITY_TYPE_COMMAND_REPORT",
		12: "ENTITY_TYPE_CONTACT_INFO",
		13: "ENTITY_TYPE_CONTRACT",
		14: "ENTITY_TYPE_CONTRACT_GROUP",
		15: "ENTITY_TYPE_CONTRACT_MARGIN",
		16: "ENTITY_TYPE_CONTRACT_MATURITY",
		17: "ENTITY_TYPE_CURRENCY",
		18: "ENTITY_TYPE_CURRENCY_RATE",
		19: "ENTITY_TYPE_ENTITLEMENT",
		20: "ENTITY_TYPE_EXCHANGE",
		21: "ENTITY_TYPE_EXECUTION_REPORT",
		22: "ENTITY_TYPE_FILL",
		23: "ENTITY_TYPE_FILL_FEE",
		24: "ENTITY_TYPE_FILL_PAIR",
		25: "ENTITY_TYPE_MARGIN_SNAPSHOT",
		26: "ENTITY_TYPE_MARKET_DATA_SUBSCRIPTION",
		27: "ENTITY_TYPE_MARKET_DATA_SUBSCRIPTION_EXCHANGE_SCOPE",
		28: "ENTITY_TYPE_MARKET_DATA_SUBSCRIPTION_PLAN",
		29: "ENTITY_TYPE_ORDER_STRATEGY",
		30: "ENTITY_TYPE_ORDER_STRATEGY_LINK",
		31: "ENTITY_TYPE_ORDER_STRATEGY_TYPE",
		32: "ENTITY_TYPE_ORDER_VERSION",
		33: "ENTITY_TYPE_ORGANIZATION",
		34: "ENTITY_TYPE_PERMISSIONED_ACCOUNT_AUTO_LIQ",
		35: "ENTITY_TYPE_POSITION",
		36: "ENTITY_TYPE_PRODUCT",
		37: "ENTITY_TYPE_PRODUCT_MARGIN",
		38: "ENTITY_TYPE_PRODUCT_SESSION",
		39: "ENTITY_TYPE_PROPERTY",
		40: "ENTITY_TYPE_SECOND_MARKET_DATA_SUBSCRIPTION",
		41: "ENTITY_TYPE_SPREAD_DEFINITION",
		42: "ENTITY_TYPE_TRADING_PERMISSION",
		43: "ENTITY_TYPE_TRADOVATE_SUBSCRIPTION",
		44: "ENTITY_TYPE_TRADOVATE_SUBSCRIPTION_PLAN",
		45: "ENTITY_TYPE_USER",
		46: "ENTITY_TYPE_USER_ACCOUNT_AUTO_LIQ",
		47: "ENTITY_TYPE_USER_ACCOUNT_POSITION_LIMIT",
		48: "ENTITY_TYPE_USER_ACCOUNT_RISK_PARAMETER",
		49: "ENTITY_TYPE_USER_PLUGIN",
		50: "ENTITY_TYPE_USER_PROPERTY",
		51: "ENTITY_TYPE_USER_SESSION",
		52: "ENTITY_TYPE_USER_SESSION_STATS",
	}
	EntityType_value = map[string]int32{
		"ENTITY_TYPE_UNSPECIFIED":                             0,
		"ENTITY_TYPE_ACCOUNT":                                 1,
		"ENTITY_TYPE_ACCOUNT_RISK_STATUS":                     2,
		"ENTITY_TYPE_ADMIN_ALERT":                             3,
		"ENTITY_TYPE_ADMIN_ALERT_SIGNAL":                      4,
		"ENTITY_TYPE_CASH_BALANCE":                            5,
		"ENTITY_TYPE_CASH_BALANCE_LOG":                        6,
		"ENTITY_TYPE_CHAT":                                    7,
		"ENTITY_TYPE_CHAT_MESSAGE":                            8,
		"ENTITY_TYPE_CLEARING_HOUSE":                          9,
		"ENTITY_TYPE_COMMAND":                                 10,
		"ENTITY_TYPE_COMMAND_REPORT":                          11,
		"ENTITY_TYPE_CONTACT_INFO":                            12,
		"ENTITY_TYPE_CONTRACT":                                13,
		"ENTITY_TYPE_CONTRACT_GROUP":                          14,
		"ENTITY_TYPE_CONTRACT_MARGIN":                         15,
		"ENTITY_TYPE_CONTRACT_MATURITY":                       16,
		"ENTITY_TYPE_CURRENCY":                                17,
		"ENTITY_TYPE_CURRENCY_RATE":                           18,
		"ENTITY_TYPE_ENTITLEMENT":                             19,
		"ENTITY_TYPE_EXCHANGE":                                20,
		"ENTITY_TYPE_EXECUTION_REPORT":                        21,
		"ENTITY_TYPE_FILL":                                    22,
		"ENTITY_TYPE_FILL_FEE":                                23,
		"ENTITY_TYPE_FILL_PAIR":                               24,
		"ENTITY_TYPE_MARGIN_SNAPSHOT":                         25,
		"ENTITY_TYPE_MARKET_DATA_SUBSCRIPTION":                26,
		"ENTITY_TYPE_MARKET_DATA_SUBSCRIPTION_EXCHANGE_SCOPE": 27,
		"ENTITY_TYPE_MARKET_DATA_SUBSCRIPTION_PLAN":           28,
		"ENTITY_TYPE_ORDER_STRATEGY":                          29,
		"ENTITY_TYPE_ORDER_STRATEGY_LINK":                     30,
		"ENTITY_TYPE_ORDER_STRATEGY_TYPE":                     31,
		"ENTITY_TYPE_ORDER_VERSION":                           32,
		"ENTITY_TYPE_ORGANIZATION":                            33,
		"ENTITY_TYPE_PERMISSIONED_ACCOUNT_AUTO_LIQ":           34,
		"ENTITY_TYPE_POSITION":                                35,
		"ENTITY_TYPE_PRODUCT":                                 36,
		"ENTITY_TYPE_PRODUCT_MARGIN":                          37,
		"ENTITY_TYPE_PRODUCT_SESSION":                         38,
		"ENTITY_TYPE_PROPERTY":                                39,
		"ENTITY_TYPE_SECOND_MARKET_DATA_SUBSCRIPTION":         40,
		"ENTITY_TYPE_SPREAD_DEFINITION":                       41,
		"ENTITY_TYPE_TRADING_PERMISSION":                      42,
		"ENTITY_TYPE_TRADOVATE_SUBSCRIPTION":                  43,
		"ENTITY_TYPE_TRADOVATE_SUBSCRIPTION_PLAN":             44,
		"ENTITY_TYPE_USER":                                    45,
		"ENTITY_TYPE_USER_ACCOUNT_AUTO_LIQ":                   46,
		"ENTITY_TYPE_USER_ACCOUNT_POSITION_LIMIT":             47,
		"ENTITY_TYPE_USER_ACCOUNT_RISK_PARAMETER":             48,
		"ENTITY_TYPE_USER_PLUGIN":                             49,
		"ENTITY_TYPE_USER_PROPERTY":                           50,
		"ENTITY_TYPE_USER_SESSION":                            51,
		"ENTITY_TYPE_USER_SESSION_STATS":                      52,
	}
)

func (x EntityType) Enum() *EntityType {
	p := new(EntityType)
	*p = x
	return p
}

func (x EntityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EntityType) Descriptor() protoreflect.EnumDescriptor {
	return file_entity_v0_entity_proto_enumTypes[1].Descriptor()
}

func (EntityType) Type() protoreflect.EnumType {
	return &file_entity_v0_entity_proto_enumTypes[1]
}

func (x EntityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EntityType.Descriptor instead.
func (EntityType) EnumDescriptor() ([]byte, []int) {
	return file_entity_v0_entity_proto_rawDescGZIP(), []int{1}
}

type Entity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event Event      `protobuf:"varint,1,opt,name=event,proto3,enum=entity.v0.Event" json:"event,omitempty"`
	Type  EntityType `protobuf:"varint,2,opt,name=type,proto3,enum=entity.v0.EntityType" json:"type,omitempty"`
	Raw   []byte     `protobuf:"bytes,3,opt,name=raw,proto3" json:"raw,omitempty"`
}

func (x *Entity) Reset() {
	*x = Entity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_entity_v0_entity_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Entity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entity) ProtoMessage() {}

func (x *Entity) ProtoReflect() protoreflect.Message {
	mi := &file_entity_v0_entity_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entity.ProtoReflect.Descriptor instead.
func (*Entity) Descriptor() ([]byte, []int) {
	return file_entity_v0_entity_proto_rawDescGZIP(), []int{0}
}

func (x *Entity) GetEvent() Event {
	if x != nil {
		return x.Event
	}
	return Event_EVENT_UNSPECIFIED
}

func (x *Entity) GetType() EntityType {
	if x != nil {
		return x.Type
	}
	return EntityType_ENTITY_TYPE_UNSPECIFIED
}

func (x *Entity) GetRaw() []byte {
	if x != nil {
		return x.Raw
	}
	return nil
}

var File_entity_v0_entity_proto protoreflect.FileDescriptor

var file_entity_v0_entity_proto_rawDesc = []byte{
	0x0a, 0x16, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2f, 0x76, 0x30, 0x2f, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x2e, 0x76, 0x30, 0x22, 0x6d, 0x0a, 0x06, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x26, 0x0a,
	0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x30, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x76, 0x30, 0x2e,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x72,
	0x61, 0x77, 0x2a, 0x57, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x11, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x2a, 0xe7, 0x0d, 0x0a, 0x0a,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x4e,
	0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x4e, 0x54, 0x49, 0x54,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x01,
	0x12, 0x23, 0x0a, 0x1f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54,
	0x10, 0x03, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x53, 0x49,
	0x47, 0x4e, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x53, 0x48, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e,
	0x43, 0x45, 0x10, 0x05, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x53, 0x48, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45,
	0x5f, 0x4c, 0x4f, 0x47, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x10, 0x07, 0x12, 0x1c, 0x0a, 0x18,
	0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x54,
	0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x08, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x4e,
	0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x49,
	0x4e, 0x47, 0x5f, 0x48, 0x4f, 0x55, 0x53, 0x45, 0x10, 0x09, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x4e,
	0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e,
	0x44, 0x10, 0x0a, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52,
	0x54, 0x10, 0x0b, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x43, 0x54, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10,
	0x0c, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x10, 0x0d, 0x12, 0x1e, 0x0a, 0x1a, 0x45,
	0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52,
	0x41, 0x43, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x0e, 0x12, 0x1f, 0x0a, 0x1b, 0x45,
	0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52,
	0x41, 0x43, 0x54, 0x5f, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x10, 0x0f, 0x12, 0x21, 0x0a, 0x1d,
	0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x52, 0x41, 0x43, 0x54, 0x5f, 0x4d, 0x41, 0x54, 0x55, 0x52, 0x49, 0x54, 0x59, 0x10, 0x10, 0x12,
	0x18, 0x0a, 0x14, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x11, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x4e, 0x54,
	0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43,
	0x59, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x12, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x4e, 0x54, 0x49,
	0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x10, 0x13, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x14, 0x12,
	0x20, 0x0a, 0x1c, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45,
	0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10,
	0x15, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x46, 0x49, 0x4c, 0x4c, 0x10, 0x16, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x4e, 0x54, 0x49, 0x54,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x46, 0x45, 0x45, 0x10,
	0x17, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x50, 0x41, 0x49, 0x52, 0x10, 0x18, 0x12, 0x1f, 0x0a, 0x1b,
	0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x47,
	0x49, 0x4e, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x10, 0x19, 0x12, 0x28, 0x0a,
	0x24, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x52,
	0x4b, 0x45, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x1a, 0x12, 0x37, 0x0a, 0x33, 0x45, 0x4e, 0x54, 0x49, 0x54,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x10, 0x1b,
	0x12, 0x2d, 0x0a, 0x29, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x55, 0x42, 0x53,
	0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x10, 0x1c, 0x12,
	0x1e, 0x0a, 0x1a, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x10, 0x1d, 0x12,
	0x23, 0x0a, 0x1f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x4c, 0x49,
	0x4e, 0x4b, 0x10, 0x1e, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45,
	0x47, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x1f, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x4e, 0x54,
	0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x56,
	0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x20, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x4e, 0x54, 0x49,
	0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x21, 0x12, 0x2d, 0x0a, 0x29, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x45, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f,
	0x4c, 0x49, 0x51, 0x10, 0x22, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x23, 0x12,
	0x17, 0x0a, 0x13, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50,
	0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x10, 0x24, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x4e, 0x54, 0x49,
	0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f,
	0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x10, 0x25, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x4e, 0x54, 0x49,
	0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x26, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x4e, 0x54,
	0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54,
	0x59, 0x10, 0x27, 0x12, 0x2f, 0x0a, 0x2b, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54,
	0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x28, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x50, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x29, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x4e, 0x54, 0x49, 0x54,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x50,
	0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x2a, 0x12, 0x26, 0x0a, 0x22, 0x45,
	0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x4f,
	0x56, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x2b, 0x12, 0x2b, 0x0a, 0x27, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x4f, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x55, 0x42,
	0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x10, 0x2c,
	0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x10, 0x2d, 0x12, 0x25, 0x0a, 0x21, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x4c, 0x49, 0x51, 0x10, 0x2e, 0x12, 0x2b, 0x0a,
	0x27, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x2f, 0x12, 0x2b, 0x0a, 0x27, 0x45, 0x4e,
	0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41,
	0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x45, 0x54, 0x45, 0x52, 0x10, 0x30, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x4e, 0x54, 0x49, 0x54,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x4c, 0x55, 0x47,
	0x49, 0x4e, 0x10, 0x31, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54,
	0x59, 0x10, 0x32, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10,
	0x33, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x53, 0x10, 0x34, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x6e, 0x74, 0x68, 0x6f, 0x6e, 0x79, 0x48, 0x65, 0x77, 0x69, 0x6e,
	0x73, 0x2f, 0x74, 0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x2f, 0x76, 0x30, 0x3b, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_entity_v0_entity_proto_rawDescOnce sync.Once
	file_entity_v0_entity_proto_rawDescData = file_entity_v0_entity_proto_rawDesc
)

func file_entity_v0_entity_proto_rawDescGZIP() []byte {
	file_entity_v0_entity_proto_rawDescOnce.Do(func() {
		file_entity_v0_entity_proto_rawDescData = protoimpl.X.CompressGZIP(file_entity_v0_entity_proto_rawDescData)
	})
	return file_entity_v0_entity_proto_rawDescData
}

var file_entity_v0_entity_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_entity_v0_entity_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_entity_v0_entity_proto_goTypes = []interface{}{
	(Event)(0),      // 0: entity.v0.Event
	(EntityType)(0), // 1: entity.v0.EntityType
	(*Entity)(nil),  // 2: entity.v0.Entity
}
var file_entity_v0_entity_proto_depIdxs = []int32{
	0, // 0: entity.v0.Entity.event:type_name -> entity.v0.Event
	1, // 1: entity.v0.Entity.type:type_name -> entity.v0.EntityType
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_entity_v0_entity_proto_init() }
func file_entity_v0_entity_proto_init() {
	if File_entity_v0_entity_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_entity_v0_entity_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Entity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_entity_v0_entity_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_entity_v0_entity_proto_goTypes,
		DependencyIndexes: file_entity_v0_entity_proto_depIdxs,
		EnumInfos:         file_entity_v0_entity_proto_enumTypes,
		MessageInfos:      file_entity_v0_entity_proto_msgTypes,
	}.Build()
	File_entity_v0_entity_proto = out.File
	file_entity_v0_entity_proto_rawDesc = nil
	file_entity_v0_entity_proto_goTypes = nil
	file_entity_v0_entity_proto_depIdxs = nil
}
